-- Generated types
type entries = Nat.t | Nat.t | Unit.t
type storage = Nat.t
type context = List.t Transaction.t * storage

sig main : entries * storage -> List.t Transaction.t * storage
val main = fun arguments ->
    -- Retrieve parameters + implicit ones
    let entry = fst arguments in
    let context = [], snd arguments in
    -- Decomposition
    let context =
        case entry
            (fun p -> increment (p, context))
            (fun p ->
                 case p
                    (fun p -> decrement (p, context))
                    (fun p -> reset (p, context))
            )
    in
    (fst context, snd context)

sig increment : Nat.t * context -> context
val increment  = fun arguments ->
    -- Retrieve parameters + implicit ones
    let i = fst arguments in
    let operations = fst (snd arguments) in
    let storage = snd (snd arguments) in
    -- storage += i
    let storage = storage + i in
        operations, storage

sig decrement : Nat.t * context -> context
val decrement = fun arguments ->
    -- Retrieve parameters + implicit ones
    let i = fst arguments in
    let operations = fst (snd arguments) in
    let storage = snd (snd arguments) in
    -- requires { storage >= i -- Cannot decrement more than expected }
    let assert (storage >= i) "Cannot decrement more than expected" in
    -- storage -= i
    let storage = storage - i in
        operations, storage

sig reset : Unit.t * context -> context
val reset = fun arguments ->
    -- Retrieve parameters + implicit ones
    let _ = fst arguments in
    let operations = fst (snd arguments) in
    let storage = snd (snd arguments) in
    -- storage = 0
    let storage = 0 in
        operations, storage
