-{
    -- Should be checked during the compilation (partial evaluation)
    invariant {
        storage[*] <= Contract.balance
    }
}-

sig Ledger : type
val ledger = Map.t Nat.t (Map.t Address.t Currency.t)

-- Additional types

sig entries : type
val entries = Nat.t | Nat.t * (Address.t * Currency.t) | Nat.t * Currency.t

type storage = ledger
type context = List.t Transaction.t * storage

sig main : entries * storage -> List.t Transaction.t * storage
val main = fun arguments ->
    -- Retrieve parameters + implicit ones
    let entry = fst arguments in
    let context = [], snd arguments in
    -- Decomposition
    let context =
        case entry
            (fun p -> deposit (p, context))
            (fun p ->
                case p
                    (fun p -> transfer (p, context))
                    (fun p -> withdraw (p, context))
            )
    in
    (fst context, snd context)

sig deposit : Nat.t * context -> context
val deposit = fun arguments ->
    -- Retrieve parameters + implicit ones
    let token = fst arguments in
    let operations = fst (snd arguments) in
    let storage = snd (snd arguments) in
    -- storage[token][Transaction.sender] += Transaction.amount
    let storage_token = Map.get storage token (Map.empty ()) in
    let storage_token_sender = Map.get storage_token Transaction.sender 0 in
    let storage_token = Map.set storage_token Transaction.sender (storage_token_sender + Transaction.amount) in
    let storage = Map.set storage token storage_token in
        operations, storage

sig transfer : (Nat.t * (Address.t * Currency.t)) * context -> context
val transfer = fun arguments ->
    -- Retrieve parameters + implicit ones
    let token = fst (fst arguments) in
    let destination  = fst (snd (fst arguments)) in
    let amount = snd (snd (fst arguments)) in
    let operations = fst (snd arguments) in
    let storage = snd (snd arguments) in
    -- requires { storage[token][Transaction.sender] > amount -- Too much transferred Currency.t }
    let assert (Map.get (storage, Transaction.sender, 0) > amount) "Too much transferred Currency.t" in
    -- storage[token][Transaction.sender] -= amount
    let storage_token = Map.get storage token (Map.empty ()) in
    let storage_token_sender = Map.get storage_token Transaction.sender 0 in
    let storage_token = Map.set storage_token Transaction.sender (storage_token_sender - amount) in
    let storage = Map.set storage token storage_token in
    -- storage[token][destination ] += amount
    let storage_token = Map.get storage token (Map.empty ()) in
    let storage_token_destination  = Map.get storage_token destination 0 in
    let storage_token = Map.set storage_token destination  (storage_token_destination + amount) in
    let storage = Map.set storage token storage_token in
        operations, storage

sig withdraw : (Nat.t * Currency.t) * context -> context
val withdraw = fun arguments ->
    let token = fst (fst arguments) in
    let amount = snd (fsf arguments) in
    let operations = fst (snd arguments) in
    let storage = snd (snd arguments) in
    -- requires { storage[token][Transaction.sender] > amount -- Too much transferred Currency.t }
    let assert (Map.get storage Transaction.sender 0 > amount) "Too much transferred Currency.t" in
    -- storage[token][Transaction.sender] -= amount
    let storage_token = Map.get storage token (Map.empty ()) in
    let storage_token_sender = Map.get storage_token Transaction.sender 0 in
    let storage_token = Map.set storage_token Transaction.sender (storage_token_sender - amount) in
    let storage = Map.set storage token storage_token in
    -- transfer amount to sender
    let operations = List.cons (Transaction.transfer amount Transaction.sender) operations in
        operations, storage
